
;# Preprocessor and Compiler commands
; Comment delineator

% alignment / size
, element separator
a,,b range / iteration operator
   for i(,,) ; iterates each element in i
   for i(3,,10) ; iterates elements indexed 3 to 10 in i

x :: y  Explicitly assign memory address y to x
#var Pointer operator, returns the address of the memory (Pointer)  
@var Alias operater, returns implicitly dereferenced memory (Reference) or dereferences memory

~ Lifetime

  <tag} Scope Jump Operator  
  {tag> Scope Land Operator
 . member access operator
 .. scope access operator
   std..add() retrieves add() from std or it's public subscopes
   ..add() retrieves an external to the current scope add if there is a local add() defined.


x.(y) method access operator, supports multiple method calls
   x(y) call operator for methods. also serves as the subscript operator for indexing, as variable memory and method memory are equivalent.
   (x, y) tuple/list/vector
   (x)y
   (x).y SIMD call operations are built into tuples.
x.[y] 
   x[y][z]
   [x, y] tensor operator
   [x]y
   [x].y
x.<y>
   x<y> 
   <x, y>
   <x>y Trait punning
     <~mat> removes math trait
     <log> adds logical trait
   <x>.y Trait defined behaviors and assertions

_> Lambda Operator
:> Currying Operator

{} Closure operator
  !{} Assertion Scope
  _{} Assembly Scope
  &{} Concurrent Scope
  #{} Byte Structure Scope

  
    := Assign
    @= Pointer assignment
    +=, -=, *=, /=, //= for their respective assignments, ++ and -- for +=1 and -=1

" String Literal
 ' Regex Literal
 $ Regex Capture operator, String Interpolation/Escape Operator
 ` LaTeX literal, and spacer for hard coded bytes

Comparison, Arithmetic, Bitwise, and Bytewise operators all have defined behavior on tuples and lists
Comparisons on tuples return an array
Arithmetic on tuples/lists is performed element by element. Null elements are ignored
Bitwise on tuples allows mass masking

Comparison Operators 
  == value equality
  === reference equality
  != value inequality
  !== reference inequality
  > GREAT
  >= GREQ
  < LESS
  <= LEEQ
  <=> Returns {-1, 0, 1} if {LESS, EQ, GREAT}
  ># Element of

  ? Ternary operator ; true if true
    x? x : y ; returns x if x is true 
  : Return operator
  ?? Null ternary, true if null 
    x?? y : x
  Ternary works on tuples
    ?:(x, y, z)
    ??:(x, y, z)

Arithmetic Operations
 + Addition 
 - Subtraction
 * Multiplication
 ** Exponent
 / Division
 // Modulo

Bitwise Operators
  [> bit shift right
  <] bit shift left
  ~   COMP  
  ||   OR
  &&   AND 
  >>   IMP
  !|   NOR
  !&   NAND
  !>   NIMP
  ^|   XOR
  ^!   XNOR

Bytewise
  &+ Concatenation (Specific Bytes)
  &** Concatenation (Insert copies after each instance of token or regex capture)
    "Hello " &* (" ", "World") becomes "Hello World"
    "Hello  " &* (" ", " World") becomes "Hello  World  World"
    str &** ('regExpression with capture groups', "inserted string")
  &- Decatenation (Specific Bytes)
  &// Decatenation (Delete each instance of token or capture groups)
    str &** 'regExpression with capture groups'
  &/* Find and Replace (replace capture groups with a token)
    str &** ('regExpression with capture groups', string or string expression)
  &| BYTE OR
    Uses the first string, but replaces any null bytes like EOF with values in the second string at the same index.
  &&& BYTE AND: returns an ordered string of characters that match in the first and second string
  &!| BYTE NOR: returns an ordered string characters from the first string that did not match the second strings



Possible Ops

<| |>
[| |]
{| |}
